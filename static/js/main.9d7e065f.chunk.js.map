{"version":3,"sources":["pages/Search.module.scss","components/Header/index.js","components/Footer/index.js","components/SearchBar/index.js","components/UserTable/UserTableHeader/index.js","components/UserTable/UserTableRow/index.js","components/UserTable/index.js","pages/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Footer","SearchBar","props","setSearch","id","InputGroup","size","FormControl","placeholder","aria-label","aria-describedby","onChange","Append","Text","Form","Group","Control","name","changeSearchBy","as","value","UserTableHeader","sort","selectedSortCarrot","asc","data-sort","onClick","changeSort","UserTableRow","user","email","location","dob","phone","picture","last","first","Image","src","thumbnail","roundedCircle","city","state","Date","date","getFullYear","sortBy","a","b","localeCompare","sortProperty","property","filterBy","users","searchText","forEach","stringSegment","filter","toLowerCase","includes","UserTable","useAxios","data","loading","error","useState","setSort","setAsc","Alert","variant","results","trim","split","searchBy","console","time","timeEnd","Table","striped","bordered","hover","obj","sortField","target","dataset","map","ind","key","Search","setSearchText","setSearchBy","searchFieldContents","searchBySelection","searchField","styles","wideContainer","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9d7e065f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wideContainer\":\"Search_wideContainer__133oN\"};","import React from 'react';\nimport './style.scss';\n\nconst Header = () => {\n    return (\n        <header className=\"header\">\n                <h1 className='text-center'>Employee Directory</h1>\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport './style.scss';\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n                <p className='ml-4'>&copy; 2020 James Lee</p>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport './style.scss';\n\nimport { InputGroup, FormControl, Form } from 'react-bootstrap';\nimport { FaSearch } from 'react-icons/fa';\n\nconst SearchBar = (props) => {\n    const { setSearch } = props;\n    return (\n        <div className=\"py-4\" id=\"searchDiv\">\n            <InputGroup size=\"lg\">\n                <FormControl\n                    placeholder=\"Employee Search\"\n                    aria-label=\"Large\"\n                    aria-describedby=\"inputGroup-sizing-lg\"\n                    onChange={setSearch}\n                />\n                <InputGroup.Append>\n                    <InputGroup.Text>\n                        <FaSearch />\n                    </InputGroup.Text>\n                </InputGroup.Append>\n            </InputGroup>\n            <Form.Group className=\"mt-2 mb-0\">\n                <Form.Control name=\"searchBy\" onChange={props.changeSearchBy} placeholder=\"Search by: \" size=\"sm\" as=\"select\">\n                    <option value=\"name\">Name</option>\n                    <option value=\"email\">Email</option>\n                    <option value=\"location\">Location</option>\n                    <option value=\"dob\">Date of Birth</option>\n                    <option value=\"phone\">Phone</option>\n                </Form.Control>\n            </Form.Group>\n        </div>\n    );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport './style.scss';\n\nconst UserTableHeader = (props) => {\n    // const {sortCol, setSortCol} = {props}\n\n    let { sort, asc } = props;\n\n    const selectedSortCarrot = asc ? 'carrot carrotup' : 'carrot carrotdown';\n\n    return (\n        <thead className=\"dynamicHeader\">\n            <tr>\n                <th></th>\n                <th data-sort=\"name\" onClick={props.changeSort} className={sort === 'name' ? selectedSortCarrot : ''}>\n                    Name\n                </th>\n                <th data-sort=\"email\" onClick={props.changeSort} className={sort === 'email' ? selectedSortCarrot : ''}>\n                    Email\n                </th>\n                <th data-sort=\"location\" onClick={props.changeSort} className={sort === 'location' ? selectedSortCarrot : ''}>\n                    Location\n                </th>\n                <th data-sort=\"dob\" onClick={props.changeSort} className={sort === 'dob' ? selectedSortCarrot : ''}>\n                    Birthdate\n                </th>\n                <th data-sort=\"phone\" onClick={props.changeSort} className={sort === 'phone' ? selectedSortCarrot : ''}>\n                    Phone\n                </th>\n            </tr>\n        </thead>\n    );\n};\n\nexport default UserTableHeader;\n","import React from 'react';\nimport './style.scss';\n\nimport Image from 'react-bootstrap/Image'\n\n\nconst UserTableRow = (props) => {\n    // const {sortCol, setSortCol} = {props}\n    let { name, email, location, dob, phone, picture } = props.user;\n    name = `${name.last}, ${name.first}`;\n    return (\n        <tr>\n            <td><Image src={picture.thumbnail} roundedCircle /></td>\n            <td>{name}</td>\n            <td>{email}</td>\n            <td>{`${location.city}, ${location.state}`}</td>\n            <td>{new Date(dob.date).getFullYear()}</td>\n            <td className=\"nobreak\">{phone}</td>\n        </tr>\n    );\n};\n\nexport default UserTableRow;\n","import React, { useState } from 'react';\nimport './style.scss';\nimport UserTableHeader from './UserTableHeader';\nimport UserTableRow from './UserTableRow';\nimport Table from 'react-bootstrap/Table';\nimport useAxios from 'axios-hooks';\nimport Alert from 'react-bootstrap/Alert';\n\nconst sortBy = {\n    name: (asc) => {\n        return (a, b) => {\n            if (asc) {\n                return a.name.last.localeCompare(b.name.last);\n            }\n            return b.name.last.localeCompare(a.name.last);\n        };\n    },\n    location: (asc) => {\n        return (a, b) => {\n            if (asc) {\n                return a.location.city.localeCompare(b.location.city);\n            }\n            return b.location.city.localeCompare(a.location.city);\n        };\n    },\n    dob: (asc) => {\n        return (a, b) => {\n            if (asc) {\n                return a.dob.date.localeCompare(b.dob.date);\n            }\n            return b.dob.date.localeCompare(a.dob.date);\n        };\n    },\n    sortProperty: (asc, property) => {\n        return (a, b) => {\n            if (asc) {\n                return a[property].localeCompare(b[property]);\n            }\n            return b[property].localeCompare(a[property]);\n        };\n    },\n};\n\nconst filterBy = {\n    name: (users, searchText) => {\n        searchText.forEach((stringSegment) => {\n            users = users.filter(\n                (user) =>\n                    user.name.first.toLowerCase().includes(stringSegment) ||\n                    user.name.last.toLowerCase().includes(stringSegment)\n            );\n        });\n        return users;\n    },\n    email: (users, searchText) => {\n        searchText.forEach((stringSegment) => {\n            users = users.filter(\n                (user) =>\n                    user.email.toLowerCase().includes(stringSegment)\n            );\n        });\n        return users;\n    },\n    location: (users, searchText) => {\n        searchText.forEach((stringSegment) => {\n            users = users.filter(\n                (user) =>\n                    user.location.city.toLowerCase().includes(stringSegment)\n            );\n        });\n        return users;\n    },\n    dob: (users, searchText) => {\n        searchText.forEach((stringSegment) => {\n            users = users.filter(\n                (user) =>\n                    user.dob.date.toLowerCase().includes(stringSegment)\n            );\n        });\n        return users;\n    },\n    phone: (users, searchText) => {\n        searchText.forEach((stringSegment) => {\n            users = users.filter(\n                (user) =>\n                    user.phone.includes(stringSegment)\n            );\n        });\n        return users;\n    },\n};\n\nconst UserTable = (props) => {\n    let [{ data, loading, error }] = useAxios('https://randomuser.me/api/?results=200&nat=CA&seed=jamie'); //&seed=jam'\n    const [sort, setSort] = useState('name');\n    const [asc, setAsc] = useState(true);\n\n    if (loading) return <Alert>Loading...</Alert>;\n    if (error) return <Alert variant=\"danger\">Error, API fetch failed.</Alert>;\n\n    let { results: users } = data;\n    let { searchText } = props;\n\n    const changeSort = (obj) => {\n        const sortField = obj.target.dataset.sort;\n        if (sortField === sort) {\n            setAsc(!asc);\n        } else {\n            setAsc(true);\n            setSort(sortField);\n        }\n    };\n\n    if (searchText !== '') {\n        searchText = searchText.trim().toLowerCase().split(' ');\n        users = filterBy[props.searchBy](users, searchText)\n    }\n\n    console.time('sorting');\n    switch (sort) {\n        case 'name':\n        case 'location':\n        case 'dob':\n            users = users.sort(sortBy[sort](asc));\n            break;\n        case 'email':\n        case 'phone':\n            users = users.sort(sortBy.sortProperty(asc, sort));\n            break;\n        default:\n            users = users.sort(sortBy.name(asc));\n            break;\n    }\n    console.timeEnd('sorting');\n    return (\n        <Table striped bordered hover className=\"userTable\">\n            <UserTableHeader sort={sort} changeSort={changeSort} asc={asc} setAsc={setAsc} />\n            <tbody>\n                {users.map((user, ind) => (\n                    <UserTableRow key={ind} user={user} />\n                ))}\n            </tbody>\n        </Table>\n    );\n};\n\nexport default UserTable;\n","import React, { useState } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport UserTable from '../components/UserTable';\nimport styles from './Search.module.scss';\n\n\nconst Search = () => {\n    // let [{ data, loading, error }] = useAxios('http://slowwly.robertomurray.co.uk/delay/3000/url/http://www.google.co.uk'); //&seed=jam'\n\n    const [searchText, setSearchText] = useState('');\n    const [searchBy, setSearchBy] = useState('name')\n\n    const changeSearchBy = (searchBySelection) => {\n        setSearchBy(searchBySelection.target.value)\n    }\n\n    const setSearch = (searchFieldContents) => {\n        setSearchText(searchFieldContents.target.value);\n    };\n\n    return (\n        <div>\n            <SearchBar setSearch={setSearch} changeSearchBy={changeSearchBy} searchField={searchText} />\n            <div className={styles.wideContainer}>\n                <UserTable searchBy={searchBy} searchText={searchText} />\n            </div>\n        </div>\n    );\n};\n\nexport default Search;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Search from './pages/Search';\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <Header />\n                <Route exact path=\"/\" component={Search} />\n                <Footer />\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}